

1. 그래프(Graph)의 개념
    - 단순히 노드(N, node)와 그 노드를 연결하는 간선(E, edge)을 하나로 모아 놓은 자료 구조
        즉, 연결되어 있는 객체 간의 관계를 표현할 수 있는 자료 구조이다.
            Ex) 지도, 지하철 노선도의 최단 경로, 전기 회로의 소자들, 도로(교차점과 일방 통행길), 선수 과목 등
        그래프는 여러 개의 고립된 부분 그래프(Isolated Subgraphs)로 구성될 수 있다.

        참고
        - 오일러 경로(Eulerian tour)
               그래프에 존재하는 모든 간선(edge)을 한 번만 통과하면서 처음 정점(vertex)으로 되돌아오는 경로를 말한다.
               그래프의 모든 정점에 연결된 간선의 개수가 짝수일 때만 오일러 경로가 존재한다.


2. 그래프(Graph)와 관련된 용어
       - 정점(vertex): 위치라는 개념. (node 라고도 부름)
       - 간선(edge): 위치 간의 관계. 즉, 노드를 연결하는 선 (link, branch 라고도 부름)
       - 인접 정점(adjacent vertex): 간선에 의 해 직접 연결된 정점
       - 정점의 차수(degree): 무방향 그래프에서 하나의 정점에 인접한 정점의 수
           무방향 그래프에 존재하는 정점의 모든 차수의 합 = 그래프의 간선 수의 2배
       - 진입 차수(in-degree): 방향 그래프에서 외부에서 오는 간선의 수 (내차수 라고도 부름)
       - 진출 차수(out-degree): 방향 그래픙에서 외부로 향하는 간선의 수 (외차수 라고도 부름)
           방향 그래프에 있는 정점의 진입 차수 또는 진출 차수의 합 = 방향 그래프의 간선의 수(내차수 + 외차수)
       - 경로 길이(path length): 경로를 구성하는 데 사용된 간선의 수
       - 단순 경로(simple path): 경로 중에서 반복되는 정점이 없는 경우
       - 사이클(cycle): 단순 경로의 시작 정점과 종료 정점이 동일한 경우


3. 그래프(Graph)의 특징
       - 그래프는 네트워크 모델 이다.
       - 2개 이상의 경로가 가능하다.
           즉, 노드들 사이에 무방향/방향에서 양방향 경로를 가질 수 있다.
       - self-loop 뿐 아니라 loop/circuit 모두 가능하다.
       - 루트 노드라는 개념이 없다.
       - 부모-자식 관계라는 개념이 없다.
       - 순회는 DFS나 BFS로 이루어진다.
       - 그래프는 순환(Cyclic) 혹은 비순환(Acyclic)이다.
       - 그래프는 크게 방향 그래프와 무방향 그래프가 있다.
       - 간선의 유무는 그래프에 따라 다르다.


4. 그래프(Graph)의 종류
   - 무방향 그래프 VS 방향 그래프
       무방향 그래프(Undirected Graph)
           무방향 그래프의 간선은 간선을 통해서 양 방향으로 갈 수 있다.
           정점 A와 정점 B를 연결하는 간선은 (A, B)와 같이 정점의 쌍으로 표현한다.
               (A, B)는 (B, A) 동일
           Ex) 양방향 통행 도로
       방향 그래프(Directed Graph)
           간선에 방향성이 존재하는 그래프
           A -> B로만 갈 수 있는 간선은 <A, B>로 표시한다.
               <A, B>는 <B, A>는 다름
           Ex) 일방 통행

   - 가중치 그래프
       가중치 그래프(Weighted Graph)
           간선에 비용이나 가중치가 할당된 그래프
           ‘네트워크(Network)’ 라고도 한다.
               Ex) 도시-도시의 연결, 도로의 길이, 회로 소자의 용량, 통신망의 사용료 등

   - 연결 그래프 VS 비연결 그래프
       연결 그래프(Connected Graph)
           무방향 그래프에 있는 모든 정점쌍에 대해서 항상 경로가 존재하는 경우
           Ex) 트리(Tree): 사이클을 가지지 않는 연결 그래프
       비연결 그래프(Disconnected Graph)
           무방향 그래프에서 특정 정점쌍 사이에 경로가 존재하지 않는 경우

   - 사이클 VS 비순환 그래프
       사이클(Cycle)
           단순 경로의 시작 정점과 종료 정점이 동일한 경우
               단순 경로(Simple Path): 경로 중에서 반복되는 정점이 없는 경우
       비순환 그래프(Acyclic Graph)
           사이클이 없는 그래프

   - 완전 그래프
       완전 그래프(Complete Graph)
           그래프에 속해 있는 모든 정점이 서로 연결되어 있는 그래프
           무방향 완전 그래프
               정점 수: n이면 간선의 수: n * (n-1) / 2


5. 그래프(Graph)의 탐색
   -  깊이 우선 탐색(DFS, Depth-First Search)
   루트 노드(혹은 다른 임의의 노드)에서 시작해서 다음 분기(branch)로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법
       즉, 넓게(wide) 탐색하기 전에 깊게(deep) 탐색하는 것이다.
       사용하는 경우: 모든 노드를 방문 하고자 하는 경우에 이 방법을 선택한다.
           깊이 우선 탐색이 너비 우선 탐색보다 좀 더 간단하다.

   - 너비 우선 탐색(BFS, Breadth-First Search)
   루트 노드(혹은 다른 임의의 노드)에서 시작해서 인접한 노드를 먼저 탐색하는 방법
       즉, 깊게(deep) 탐색하기 전에 넓게(wide) 탐색하는 것이다.
       사용하는 경우: 두 노드 사이의 최단 경로 혹은 임의의 경로를 찾고 싶을 때 이 방법을 선택한다.
           Ex) 지구상에 존재하는 모든 친구 관계를 그래프로 표현한 후 Ash와 Vanessa 사이에 존재하는 경로를 찾는 경우
           깊이 우선 탐색의 경우 - 모든 친구 관계를 다 살펴봐야 할지도 모른다.
           너비 우선 탐색의 경우 - Ash와 가까운 관계부터 탐색


6. References
https://gmlwjd9405.github.io/2018/08/02/data-structure-queue.html
https://sarah950716.tistory.com/12
https://talksis.tistory.com/31
https://manducku.tistory.com/23?category=683258
https://docs.oracle.com/javase/7/docs/api/index.html