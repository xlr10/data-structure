

1. 큐(Queue)의 개념
    - 삽입과 삭제가 양쪽 끝에서 모두 발생할 수 있는 자료구조 Stack과 Queue의 장점만 따서 구성되어 있다.
      입력제한 데크(입력은 한 쪽, 출력은 양쪽) , 출력제한 데크(입력은 양쪽, 출력은 한 쪽)가 있다.


2. java 라이브러리 Linked List 관련 메서드

    boolean 	add(E e)                Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
    void 	    addFirst(E e)           Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions.
    void 	    addLast(E e)            Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions.
    boolean 	contains(Object o)      Returns true if this deque contains the specified element.
    Iterator<E> descendingIterator()    Returns an iterator over the elements in this deque in reverse sequential order.
    E 	        element()               Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque).
    Iterator<E> iterator()              Returns an iterator over the elements in this deque in proper sequence.
    E 	        peek()                  Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.
    E 	        peekFirst()             Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.
    E 	        peekLast()              Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.
    E 	        pop()                   Pops an element from the stack represented by this deque.
    void 	    push(E e)               Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
    E        	remove()                Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque).
    boolean 	remove(Object o)        Removes the first occurrence of the specified element from this deque.
    E        	removeFirst()           Retrieves and removes the first element of this deque.
    boolean 	removeFirstOccurrence(Object o)     Removes the first occurrence of the specified element from this deque.
    E 	        removeLast()            Retrieves and removes the last element of this deque.
    boolean 	removeLastOccurrence(Object o)      Removes the last occurrence of the specified element from this deque.
    int 	    size()                  Returns the number of elements in this deque.


5. References
https://shiny-corolla.tistory.com/62
https://eskeptor.tistory.com/98
https://docs.oracle.com/javase/7/docs/api/index.html