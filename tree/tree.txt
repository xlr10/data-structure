

1. 트리(Tree)의 개념

   트리는 노드로 이루어진 자료 구조

       가. 트리는 하나의 루트 노드를 갖는다.
       나. 루트 노드는 0개 이상의 자식 노드를 갖고 있다.
       다. 그 자식 노드 또한 0개 이상의 자식 노드를 갖고 있고, 이는 반복적으로 정의된다.

       - 노드(node)들과 노드들을 연결하는 간선(edge)들로 구성되어 있다.
           트리에는 사이클(cycle)이 존재할 수 없다.
           노드들은 특정 순서로 나열될 수도 있고 그럴 수 없을 수도 있다.
           각 노드는 부모 노드로의 연결이 있을 수도 있고 없을 수도 있다.
           각 노드는 어떤 자료형으로도 표현 가능하다.
       - 비선형 자료구조로 계층적 관계를 표현한다. Ex) 디렉터리 구조, 조직도
       - 그래프의 한 종류
           사이클(cycle)이 없는 하나의 연결 그래프(Connected Graph)
           또는 DAG(Directed Acyclic Graph, 방향성이 있는 비순환 그래프)의 한 종류 이다.


2. 트리(Tree)와 관련된 용어

       - 루트 노드(root node): 부모가 없는 노드, 트리는 하나의 루트 노드만을 가진다.
       - 단말 노드(leaf node): 자식이 없는 노드, ‘말단 노드’ 또는 ‘잎 노드’라고도 부른다.
       - 내부(internal) 노드: 단말 노드가 아닌 노드
       - 간선(edge): 노드를 연결하는 선 (link, branch 라고도 부름)
       - 형제(sibling): 같은 부모를 가지는 노드
       - 노드의 크기(size): 자신을 포함한 모든 자손 노드의 개수
       - 노드의 깊이(depth): 루트에서 어떤 노드에 도달하기 위해 거쳐야 하는 간선의 수
       - 노드의 레벨(level): 트리의 특정 깊이를 가지는 노드의 집합
       - 노드의 차수(degree): 하위 트리 개수 / 간선 수 (degree) = 각 노드가 지닌 가지의 수
       - 트리의 차수(degree of tree): 트리의 최대 차수
       - 트리의 높이(height): 루트 노드에서 가장 깊숙히 있는 노드의 깊이



3. 트리(Tree)의 특징

       - 그래프의 한 종류이다. ‘최소 연결 트리’ 라고도 불린다.
       - 트리는 계층 모델 이다.
       - 트리는 DAG(Directed Acyclic Graphs, 방향성이 있는 비순환 그래프)의 한 종류이다.
           loop나 circuit이 없다. 당연히 self-loop도 없다.
           즉, 사이클이 없다.
       - 노드가 N개인 트리는 항상 N-1개의 간선(edge)을 가진다.
           즉, 간선은 항상 (정점의 개수 - 1) 만큼을 가진다.
       - 루트에서 어떤 노드로 가는 경로는 유일하다.
           임의의 두 노드 간의 경로도 유일하다. 즉, 두 개의 정점 사이에 반드시 1개의 경로만을 가진다.
       - 한 개의 루트 노드만이 존재하며 모든 자식 노드는 한 개의 부모 노드만을 가진다.
           부모-자식 관계이므로 흐름은 top-bottom 아니면 bottom-top으로 이루어진다.
       - 순회는 Pre-order, In-order 아니면 Post-order로 이루어진다. 이 3가지 모두 DFS/BFS 안에 있다.
       - 트리는 이진 트리, 이진 탐색 트리, 균형 트리(AVL 트리, red-black 트리), 이진 힙(최대힙, 최소힙) 등이 있다.


4. 트리(Tree)의 종류

       - 이진 트리(Binary Tree)
           각 노드가 최대 두 개의 자식을 갖는 트리
           모든 트리가 이진 트리는 아니다.
           이진 트리 순회
               중위 순회(in-order traversal): 왼쪽 가지 -> 현재 노드 -> 오른쪽 가지
               전위 순회(pre-order traversal): 현재 노드 -> 왼쪽 가지 -> 오른쪽 가지
               후위 순회(post-order traversal): 왼쪽 가지 -> 오른쪽 가지 -> 현재 노드

       - 이진 트리 VS 이진 탐색 트리
           이진 탐색 트리(Binary Search Tree)
               모든 노드가 아래와 같은 특정 순서를 따르는 속성이 있는 이진 트리
               모든 왼쪽 자식들 <= n < 모든 오른쪽 자식들 (모든 노드 n에 대해서 반드시 참)

       - 이진 힙(최소힙과 최대힙)
           최소힙(Min Heap)
               트리의 마지막 단계에서 오른쪽 부분을 뺀 나머지 부분이 가득 채워져 있는 완전 이진 트리이며, 각 노드의 원소가 자식들의 원소보다 작다.
                   즉, key(부모 노드) >= key(자식 노드)인 완전 이진 트리
                   가장 큰 값은 루트 노드이다.
                   N개가 힙에 들어가 있으면 높이는 log(N)이다.
           최대힙(Max Heap)
               원소가 내림차순으로 정렬되어 있다는 점에서만 최소힙과 다르다.
               각 노드의 원소가 자식들의 원소보다 크다.


5. References
https://gmlwjd9405.github.io/2018/08/12/data-structure-tree.html
https://takhyeongmin.github.io/2018/10/19/Tree/